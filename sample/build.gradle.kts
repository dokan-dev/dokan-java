/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4/userguide/building_java_projects.html
 */

version = rootProject.version
group =  rootProject.group
description="A sample in-memory filesystem for the dokan-java library"

plugins {
    java
    `maven-publish`
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter:5.8.2")
    testImplementation("org.mockito:mockito-core:4.4.0")

    implementation(project(":lib-dokan2"))
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

/**
 * Jar packaging
 */
tasks.jar {
    manifest {
        attributes(mapOf(
            "Implementation-Title" to project.name,
            "Implementation-Version" to project.version,
            "Specification-Title" to project.name,
            "Specification-Version" to project.semVerString(),
        ))
    }
}

publishing {
    publications {
        create<MavenPublication>("dokan-java-sample") {
            from(components["java"])
            pom {
                description.set(project.description)
                url.set(rootProject.extra.get("url") as String);
                licenses {
                    license {
                        name.set(rootProject.extra.get("license") as String)
                        url.set(rootProject.extra.get("licenseUrl") as String)
                    }
                }
                issueManagement {
                    url.set(rootProject.extra.get("issueManagementUrl") as String)
                    system.set(rootProject.extra.get("issueManagementSystem") as String)
                }
                scm {
                    url.set(rootProject.extra.get("scmUrl") as String)
                }
                organization {
                    name.set(rootProject.extra.get("orgName") as String)
                    url.set(rootProject.extra.get("orgUrl") as String)
                }
                developers {
                    //TODO
                }
            }
        }
    }

}

java {
    withJavadocJar()
    withSourcesJar()
}

fun Project.semVerString(): Any {
    val version = (project.version as String);
    val index = version.indexOf('-');
    return version.substring(0,index);

}
